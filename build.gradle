buildscript {
  ext {
    springCloudVersion = 'Greenwich.SR2'
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'groovy'
  id 'checkstyle'


  id 'io.spring.dependency-management' version '1.0.6.RELEASE'
  id 'org.springframework.boot' version '2.1.1.RELEASE'
  id 'com.avast.gradle.docker-compose' version '0.8.12'
  id 'org.flywaydb.flyway' version '5.2.4'
  id 'nu.studer.jooq' version '3.0.3'
}

wrapper {
  gradleVersion = '5.6.4'
}

springBoot {
  buildInfo()
}

group 'com.heycar.listings'

bootJar {
  archiveFileName = 'application.jar'
}

idea {
  module {
    sourceDirs += file('src/main/generated')
    testSourceDirs += file('src/test/generated_tests')
  }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
  maven {
    url 'http://repo.spring.io/milestone'
  }
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

dependencyManagement {
  dependencies {
    dependency 'org.projectlombok:lombok:1.18.10'
    dependency 'com.github.tomakehurst:wiremock-jre8:2.24.0'
    dependency 'com.puppycrawl.tools:checkstyle:8.16'
    dependency 'javax.activation:activation:1.1.1'
    dependency 'org.flywaydb:flyway-core:5.2.4'
    dependency 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.3.RELEASE'
    dependency 'info.solidsoft.mockito:mockito-java8:2.5.0'
  }
}

dependencies {
  // API
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.boot:spring-boot-starter-actuator'

  // PERSISTENCE
  compile 'org.springframework.boot:spring-boot-starter-jooq'
  jooqRuntime 'org.postgresql:postgresql'
  jooqRuntime 'javax.activation:activation'
  runtime 'org.postgresql:postgresql'
  compile 'org.flywaydb:flyway-core'

  // COMMON
  annotationProcessor 'org.projectlombok:lombok'
  compile 'org.projectlombok:lombok'
  compile group: 'com.opencsv', name: 'opencsv', version: '5.2'

  // CODE QUALITY
  checkstyle 'com.puppycrawl.tools:checkstyle'

  // TESTS
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'info.solidsoft.mockito:mockito-java8'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'io.rest-assured:rest-assured'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  testImplementation 'com.github.tomakehurst:wiremock-jre8'

  // api doc
  compile group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.4.1'
}

test {
  // Set heap size for the test JVM.
  minHeapSize = "256m"
  maxHeapSize = "256m"

  reports {
    junitXml.enabled = true
    html.enabled = true
  }
}

// CHECKSTYLE
checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"

tasks.withType(Checkstyle) {
  configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
  reports {
    xml.enabled = false
    html.enabled = generateHtmlReports.toBoolean()
  }
}

test {
  useJUnitPlatform {
    excludeTags 'integration-test'
  }
}

task integrationTest(type: Test, description: 'Runs the integration tests.', group: LifecycleBasePlugin.VERIFICATION_GROUP) {
  beforeTest { descriptor ->
    logger.lifecycle("Running test: ${descriptor}")
  }
  useJUnitPlatform {
    includeTags 'integration-test'
  }
}

check.dependsOn(integrationTest)
integrationTest.mustRunAfter test

// DOCKER COMPOSE
dockerCompose {
  useComposeFiles = ['docker-compose-integration-test.yml']
}

composeUp

tasks.build.finalizedBy composeDown

// DATABASES
def listingsDbHost = 'localhost:5432'

def listingsDbUrl = "jdbc:postgresql://${listingsDbHost}/listings"
def listingsDbUser = 'listings'
def listingsDbPassword = 'listings'

// FLYWAY
flyway {
  url = listingsDbUrl
  user = listingsDbUser
  password = listingsDbPassword
  schemas = ['public']
}

flywayMigrate.dependsOn composeUp

// JOOQ
jooq {
  version = '3.13.4'
  edition = 'OSS'
  listings(sourceSets.main) {
    jdbc {
      driver = 'org.postgresql.Driver'
      url = listingsDbUrl
      user = listingsDbUser
      password = listingsDbPassword
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      strategy {
        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
      }
      database {
        name = 'org.jooq.meta.postgres.PostgresDatabase'
        inputSchema = 'public'
      }
      generate {
        generatedAnnotation = false
        relations = true
        deprecated = false
        records = true
        fluentSetters = true
      }
      target {
        packageName = 'com.heycar.listings.infrastructure.persistence.jooq.generated.listings'
        directory = 'src/main/jooq'
      }
    }
  }
}

sourceSets.main.java.srcDirs += "${projectDir}/src/main/jooq"

clean.doFirst {
  delete "${projectDir}/src/main/jooq"
}

generateListingsJooqSchemaSource.dependsOn flywayMigrate

bootJar.dependsOn generateListingsJooqSchemaSource